services:

  0din:
    container_name: 0din
    image: artemisarrow/0din-docker:testing
    volumes:
      - ${SHARED_DIRECTORY}:${SHARED_DIRECTORY}
    environment:
      - NODE_ID=${NODE_ID} 
      - NODE_PORT=${NODE_PORT}
      - KNOWN_NODES=${KNOWN_NODES}
      - DB_PASSWORD=${DB_PASSWORD}
      - ENABLE_SSL=${ENABLE_SSL}
      - ENABLE_HTTPS_REDIRECT=${ENABLE_HTTPS_REDIRECT}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SHARED_DIRECTORY=${SHARED_DIRECTORY}
    ports:
      - 5000:5000
    depends_on:
      0din-postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend

  0din-postgres:
    container_name: 0din-postgres
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - 5432:5432
    volumes:
      - 0din-postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  shared-data:
  0din-postgres-db:

networks:
  backend:
    driver: bridge